---
import BaseLayout from "@layouts/BaseLayout.astro";
import { Plus, Minus, ShoppingBag } from "lucide-svelte";
import type { Prize, UserExperience } from "@lib/firebase/types";
import { GET as GET_userData } from "../api/users/[userId]";
import { GET as GET_prizes } from "../api/prizes";

const user = await Astro.locals.currentUser();
if (
  !user ||
  (user.id !== Astro.params.userId && !user.publicMetadata.isAdmin)
) {
  Astro.redirect("/users/unauthorized");
}

let userPrizes: (Prize & { count: number })[] = [];
let userData: {
  displayName: string;
  avatar: string;
  xp: UserExperience;
  prizes: Prize[];
} | null = null;

try {
  userData = await Promise.resolve(GET_userData(Astro)).then((res) =>
    res.json(),
  );

  userPrizes = userData?.prizes.reduce((acc, prize) => {
    const existingPrize = acc.find((p) => p.id === prize.id);
    if (existingPrize) {
      existingPrize.count++;
    } else {
      acc.push({ ...prize, count: 1 });
    }
    return acc;
  }, [] as (Prize & { count: number })[]) ?? [];
} catch (error) {
  console.error(error);
  return new Response(
    "An error occurred while fetching user data. Does this user exist?",
    { status: 500 },
  );
}

if (!userData) {
  return new Response("User not found", { status: 404 });
}
---

<BaseLayout>
  <div
    class="flex flex-col items-center gap-4 text-center md:flex-row md:text-left"
  >
    <img
      src={userData.avatar}
      alt={userData.displayName}
      class="h-24 w-24 rounded-full"
    />

    <div>
      <h1 class="text-3xl font-bold">{userData.displayName}</h1>
      <p class="text-muted-foreground">
        {userData.xp ? `XP: ${userData.xp.xp}` : "XP: 0 (start earning some!)"}
      </p>
    </div>
  </div>

  <h2 class="mt-8 text-2xl font-bold mb-2">Prizes</h2>

  <div class="flex flex-col gap-2">
    {
      userPrizes.map((prize) => (
        <div class="flex items-center rounded-lg bg-blue-50/80 p-3 dark:bg-slate-800/50">
          <div class="mr-3 rounded-full bg-blue-100 p-2 dark:bg-slate-700">
            <ShoppingBag class="h-4 w-4 text-blue-600 dark:text-blue-400" />
          </div>
          <div class="flex flex-grow items-center justify-between">
            <div class="text-sm font-medium text-gray-800 dark:text-gray-200">
              {prize.name}
            </div>
            <div class="ml-2 text-sm font-medium text-blue-600 dark:text-blue-400">
              {prize.count}x
            </div>
          </div>
        </div>
      ))
    }
  </div>

  <h2 class="mb-2 mt-8 text-2xl font-bold">XP History</h2>

  {
    userData.xp && userData.xp.history.length > 0 ? (
      <div class="flex flex-col gap-2">
        {userData.xp.history.map((entry) => (
          <div
            class={`flex items-center rounded-lg p-3 ${
              entry.xp > 0
                ? "bg-green-100/80 dark:bg-green-900/30"
                : "bg-red-50/80 dark:bg-red-900/20"
            }`}
          >
            <div
              class={`mr-3 rounded-full p-2 ${
                entry.xp > 0
                  ? "bg-green-200 dark:bg-green-800/50"
                  : "bg-red-100 dark:bg-red-800/50"
              }`}
            >
              {entry.xp > 0 ? (
                <Plus class="h-4 w-4 text-green-600 dark:text-green-400" />
              ) : (
                <Minus class="h-4 w-4 text-red-600 dark:text-red-400" />
              )}
            </div>
            <div class="flex-grow">
              <div class="text-sm text-gray-600 dark:text-gray-300">
                {entry.reason}
              </div>
            </div>
            <div
              class={`whitespace-nowrap font-mono font-medium ${
                entry.xp > 0
                  ? "text-green-600 dark:text-green-400"
                  : "text-red-600 dark:text-red-400"
              }`}
            >
              {entry.xp > 0 ? "+" : ""}{entry.xp} XP
            </div>
          </div>
        ))}
      </div>
    ) : (
      <p class="text-muted-foreground dark:text-gray-400">No XP history yet</p>
    )
  }
</BaseLayout>
